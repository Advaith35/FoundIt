import streamlit as st
from google import genai
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch
import os
from dotenv import load_dotenv

# Load API Key Securely
load_dotenv()
API_KEY = os.getenv("GOOGLE_API_KEY")

def detect_fake_news(news):
    client = genai.Client(api_key=API_KEY)  # Use API key from .env
    model_id = "gemini-2.0-flash"

    google_search_tool = Tool(
        google_search=GoogleSearch()
    )

    response = client.models.generate_content(
        model=model_id,
        contents=[f"Please verify the following news statement for accuracy. If the statement is true, begin your response with 'This news is true...' followed by an explanation and supporting evidence. If the statement is false, begin your response with 'This is fake news...' followed by an explanation of why it's false and any debunking information you can find.\n\nNews statement: {news}"],
        config=GenerateContentConfig(
            tools=[google_search_tool],
            response_modalities=["TEXT"],
            temperature=0.7,
            max_output_tokens=500
        )
    )
    
    result = response.text
    sources = response.candidates[0].grounding_metadata.search_entry_point.rendered_content if response.candidates[0].grounding_metadata else "No sources available."
    
    return result, sources

# Custom CSS for improved styling
st.markdown("""
    <style>
        .main {padding: 2rem;}
        .stTextArea textarea {border-radius: 10px;}
        .result-box {
            padding: 1.5rem; 
            border-radius: 10px; 
            margin: 1rem 0;
            color: white;
            font-weight: bold;
        }
        .true-news {
            background-color: #1b5e20;  /* Darker Green */
            border-left: 5px solid #4caf50;
        }
        .fake-news {
            background-color: #b71c1c;  /* Darker Red */
            border-left: 5px solid #ff1744;
        }
        .source-box {
            padding: 1rem;
            background-color: #263238;
            color: white;
            border-radius: 10px;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üì∞ Fake News Detector")
st.markdown("Verify the authenticity of news articles and statements using AI-powered analysis and web sources.")

# Input Section
with st.container():
    st.subheader("üîç Enter News Statement")
    news_input = st.text_area(
        "Paste the news statement here:",
        placeholder="Enter the news text you want to verify...",
        height=150,
        label_visibility="collapsed"
    )

# Analysis Button
col1, col2, col3 = st.columns([1,2,1])
with col2:
    analyze_btn = st.button("Analyze News", use_container_width=True, type="primary")

if analyze_btn:
    if not news_input.strip():
        st.error("‚ö† Please enter a news statement to verify.")
    else:
        with st.spinner("üîé Analyzing news statement..."):
            result, sources = detect_fake_news(news_input)
        
        # Result Display
        st.markdown("---")
        if "This news is true" in result:
            st.subheader("‚úÖ Analysis Result")
            st.markdown(f'<div class="result-box true-news">{result}</div>', unsafe_allow_html=True)
        elif "This is fake news" in result:
            st.subheader("‚ùå Analysis Result")
            st.markdown(f'<div class="result-box fake-news">{result}</div>', unsafe_allow_html=True)
        else:
            st.subheader("üìã Analysis Result")
            st.info(result)

        # Sources Display
        with st.expander("üîó View Sources & References"):
            if sources != "No sources available.":
                st.markdown("#### Verified Sources:")
                st.markdown(f'<div class="source-box">{sources}</div>', unsafe_allow_html=True)
            else:
                st.warning("No external sources were used for this verification.")

        # Additional Info
        st.markdown("---")
        st.markdown("""
            *Disclaimer:* This analysis is generated by AI and should be used as a reference only. 
            Always verify information through multiple trusted sources.
        """)
